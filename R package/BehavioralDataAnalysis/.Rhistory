return(coeff)
}
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %do% {
df_sample <- df %>% dplyr::slice_sample(n = nrow(df), replace = TRUE)
mean(df_sample$x)
}
stopImplicitCluster(cl)
return(vec)
}
profvis({
foreach_vec <- foreach_fun(B=100)
})
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
foreach_vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %do% {
df_sample <- df %>% dplyr::slice_sample(n = nrow(df), replace = TRUE)
mean(df_sample$x)
}
stopImplicitCluster(cl)
return(vec)
}
profvis({
foreach_vec <- foreach_fun(B=100)
})
foreach_vec <- rep(-1, B)
foreach_vec <- rep(-1, 100)
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
foreach_vec <- rep(-1, B)
B = 100
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
foreach_vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %do% {
df_sample <- df %>% dplyr::slice_sample(n = N, replace = TRUE)
mean(df_sample$x)
}
stopImplicitCluster(cl)
stopCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %do% {
df_sample <- df %>% dplyr::slice_sample(n = N, replace = TRUE)
mean(df_sample$x)
}
stopImplicitCluster(cl)
warnings()
hist(vec)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
nb_cores <- detectCores() - 1
#cl <- makeCluster(nb_cores)
registerDoParallel(nb_cores)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df_sample <- df %>% dplyr::slice_sample(n = N, replace = TRUE)
mean(df_sample$x)
}
stopImplicitCluster()
stopCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
?sample
dj <- sample(df, size = N, replace = TRUE)
remove(dj)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
nb_cores <- detectCores() - 1
#cl <- makeCluster(nb_cores)
registerDoParallel(nb_cores)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
stopCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
#cl <- makeCluster(nb_cores)
registerDoParallel(nb_cores)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
stopCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
stopCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster(cl)
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel(cl)
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
##### Foreach implementation #####
# performance with %do%: 16gig and 14.5s for B=100, similar to FOR loop
# performance with %dopar%: gig and  for B=100
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
return(vec)
}
#foreach_vec <- foreach_fun(B=10)
profvis({
foreach_vec <- foreach_fun(B=100)
})
warnings()
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
set.seed(123)
foreach_fun <- function(B = 20){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
df <- data.frame(
x = rnorm(mean = 10, n = N)
)
mean(df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10)
foreach_vec <- foreach_fun(B=10, dat = df)
set.seed(123)
foreach_fun <- function(B = 20, dat){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
inner_df <- dat
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
sample_df <- inner_df
mean(sample_df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10, dat = df)
?slice_sample
set.seed(123)
foreach_fun <- function(B = 20, dat){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
inner_df <- dat
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
sample_df <- slice_sample(inner_df, n = N, replace = TRUE)
mean(sample_df$x)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10, dat = df)
vec
set.seed(123)
foreach_fun <- function(B = 20, dat){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
inner_df <- dat
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
sample_df <- slice_sample(inner_df, n = N, replace = TRUE)
myFun(sample_df)
}
stopImplicitCluster()
return(vec)
}
foreach_vec <- foreach_fun(B=10, dat = df)
foreach_vec
profvis({
foreach_vec <- foreach_fun(B=100)
})
profvis({
foreach_vec <- foreach_fun(B=100, dat = df)
})
hist(foreach_vec)
remove(vec, foreach_vec, B, i, nb_cores)
set.seed(123)
foreach_fun <- function(B = 20, dat){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
inner_df <- dat
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
sample_df <- slice_sample(inner_df, n = N, replace = TRUE)
myFun(sample_df)
}
stopImplicitCluster()
return(vec)
}
profvis({
foreach_vec <- foreach_fun(B=200, dat = df)
})
remve(df_sample)
remove(df_sample)
##### FOR LOOP #####
# performance: 16gig and 17s for B=100
for_fun <- function(B = 20){
for_vec <- rep(0, B)
for(b in 1:B){
for_vec[b] <- myFun(slice_sample(df, n = nrow(df), replace = TRUE))
}
return(for_vec)
}
profvis({
for_vec <- for_fun(1000)
})
gc()
set.seed(123)
foreach_fun <- function(B = 20, dat){
myFun <- function(df){
mod <- lm('y~x', data = df)
coeff <- mod$coefficients[2]
remove(mod)
return(coeff)
}
N <- 1e6
nb_cores <- detectCores() - 1
cl <- makeCluster(nb_cores)
registerDoParallel()
vec <- rep(-1, B)
inner_df <- dat
vec <- foreach(i=1:B,
.combine='c',
.packages = "dplyr",
.inorder = FALSE) %dopar% {
sample_df <- slice_sample(inner_df, n = N, replace = TRUE)
myFun(sample_df)
}
stopImplicitCluster()
return(vec)
}
profvis({
foreach_vec <- foreach_fun(B=1000, dat = df)
})
