# Normalizing all the numeric vectors in matching_vars
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
pairing(df1, 'id')
load_all()
rm(list = c("pairing"))
load_all()
update.packages()
remove.packages('cli')
install.packages('cli')
install.packages("cli")
update.packages()
library(devtools)
df1 <- data.frame(id = 1:6,
x = c(1, 1.5, 5, 5.5, 10, 10.5),
y = c(1, 1.5, 5, 5.5, 10, 10.5),
z = c('A', 'A', 'B', 'B', 'C', 'C'))
df = df1
id <- 'id'
# Extracting the matching variables for distance measurement
matching_vars <- df[, !names(df) %in% id]
#Handling numeric variables
normalized_vars <- data.frame(nrow(matching_vars))
if(any(sapply(matching_vars, class)=='numeric')){
num_vars <- matching_vars %>%
dplyr::select_if(function(x) is.numeric(x)|is.integer(x))
#Normalizing numeric variables
normalized_vars <- num_vars %>%
dplyr::mutate(dplyr::across(.fns = scales::rescale))
} else {warning("The data has no numeric variables. Results may be unstable.")}
library(dplyr)
#Handling numeric variables
normalized_vars <- data.frame(nrow(matching_vars))
if(any(sapply(matching_vars, class)=='numeric')){
num_vars <- matching_vars %>%
dplyr::select_if(function(x) is.numeric(x)|is.integer(x))
#Normalizing numeric variables
normalized_vars <- num_vars %>%
dplyr::mutate(dplyr::across(.fns = scales::rescale))
} else {warning("The data has no numeric variables. Results may be unstable.")}
model.matrix(~., data=df1)
cat_vars <- matching_vars %>%
dplyr::select_if(function(x) is.factor(x)|is.character(x)) %>%
dplyr::mutate(dplyr::across(.fns = as.factor))
#One-hot encoding categorical variables
normalized_cat_vars <- model.matrix(cat_vars)
normalized_cat_vars <- model.matrix(~., data = cat_vars)
cat_vars <- matching_vars %>%
dplyr::select_if(function(x) is.factor(x)|is.ch
#One-hot encoding categorical variables
normalized_cat_vars <- as.data.frame(model.matrix(~., data = cat_vars))
normalized_cat_vars <- as.data.frame(model.matrix( ~., data = cat_vars))
normalized_cat_vars <- as.data.frame(model.matrix( ~.-1, data = cat_vars))
normalized_vars <- normalized_vars %>% cbind(normalized_cat_vars)
load_all()
df1 <- data.frame(id = 1:6,
x = c(1, 1.5, 5, 5.5, 10, 10.5),
y = c(1, 1.5, 5, 5.5, 10, 10.5),
z = c('A', 'A', 'B', 'B', 'C', 'C'))
pairing(df1, 'id')
load_all()
check()
check()
check()
use_r('pairing')
0:2
list(0:2)
list(0,1)
df = df1
id = 'id'
n.groups = 2
# Generating the matched pairs
pairs_list <- pairing(df, id = id, n.groups = n.groups)
# Assigning experimental groups to the matched pairs
N_pairs <- length(pairs_lst)
N_pairs <- length(pairs_list)
exp_grps <- lapply(1:N_pairs, function(x) list(0,1))
assgnmt <- lapply(1:N_pairs, function(x) list(0,1))
assgnmt <- lapply(assgnmt, function(x) sample(x))
assgnmt <- unlist(assgnmt)
pairs_list <- unlist(pairs_list)
pairs_df <- tibble(
id = matches_lst,
grp = assgnmt
)
pairs_df <- data.frame(
id = matches_lst,
grp = assgnmt
)
pairs_df <- data.frame(
id = pairs_list,
grp = assgnmt
)
pairs_df <- pairs_df[order(pairs_df$id),]
use_test()
df_out <- df %>% merge(df, pairs_df, by='id')
df_out <- merge(df, pairs_df, by='id')
View(df_out)
df_out[1:2, 'grp']
sum(df_out[1:2, 'grp'])
load_all()
test_that("stratified assignment works on numeric data", {
df1 <- data.frame(id = 1:6, x = c(1, 1.5, 5, 5.5, 10, 10.5), y = c(1, 1.5, 5, 5.5, 10, 10.5))
strat_df <- strat_assign(df1, id = 'id')
expect_equal(sum(strat_df[1:2, 'grp']), 1)
expect_equal(sum(strat_df[3:4, 'grp']), 1)
expect_equal(sum(strat_df[5:6, 'grp']), 1)
})
check()
load_all()
check()
test_that("stratified assignment works when the number of rows isn't divisible by the number of groups", {
df1 <- data.frame(id = 1:7,
x = c(1, 1.5, 5, 5.5, 10, 10.5, 20),
y = c(1, 1.5, 5, 5.5, 10, 10.5, 20))
strat_df <- strat_assign(df1, id = 'id')
expect_equal(sum(strat_df[1:2, 'grp']), 1)
expect_equal(sum(strat_df[3:4, 'grp']), 1)
expect_equal(sum(strat_df[5:6, 'grp']), 1)
})
test_that("pairing works when the number of rows isn't divisible by the number of groups", {
df1 <- data.frame(id = 1:7,
x = c(1, 1.5, 5, 5.5, 10, 10.5, 200),
y = c(1, 1.5, 5, 5.5, 10, 10.5, 200))
expect_identical(pairing(df1, 'id'), list(c(2L,1L), c(4L, 3L), c(6L,5L)))
})
document()
df0 <- data.frame(id = 1:6, x = c(1, 1.5, 5, 5.5, 10, 10.5), y = c(1, 1.5, 5, 5.5, 10, 10.5))
usethis::use_data(df0)
usethis::use_data(df1)
load_all()
check()
?na.omit()
document()
df_char <- df1
usethis::use_data(df_char)
usethis::use_data(df_char, overwrite = TRUE)
df_num <- df0
usethis::use_data(df_num, overwrite = TRUE)
document()
usethis::use_data(df_char, overwrite = TRUE)
document()
document()
document()
load_all()
load_all()
df_na <- data.frame(
id = 1:6,
x = c(1, 1.5, NA, 5.5, 10, 10.5),
y = c(1, 1.5, 5, 5.5, NA, 10.5))
View(df_na)
use_data(df_na)
?expect_error
load_all()
test_that("pairing yields an error when data contains NA values", {
expect_error(pairing(df_na, 'id'), "please address NA values before using this function")
})
load_all()
test_that("pairing yields an error when data contains NA values", {
expect_error(pairing(df_na, 'id'), "please address NA values before using this function")
})
test_that("pairing yields an error when data is empty", {
expect_error(pairing(data.frame(2L), 'id'), "the data provided is empty")
})
ncol(df_na)
load_all()
test_that("pairing yields an error when data is empty", {
expect_error(pairing(data.frame(2L), 'id'), "the data provided is empty")
})
df0 <- data.frame(3L)
df0 <- data.frame(3)
df0 <- data.frame()
test_that("pairing yields an error when data is empty", {
expect_error(pairing(data.frame(), 'id'), "the data provided is empty")
})
load_all()
document()
document()
load_all()
load_all()
document()
check()
install()
data(mpg)
library(profvis)
library(tidyverse)
library(BehavioralDataAnalysis)
mpg <- ggplot2::mpg
mpg$id <- as.character(1:nrow(mpg))
long_N <- 1e3
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
# Profiling stratified assignment on long numeric
profvis({
strat_dat <- strat_assign(long_dat, 'id')
})
long_N <- 1e4
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
# Profiling stratified assignment on long numeric
profvis({
strat_dat <- strat_assign(long_dat, 'id')
})
normalized_vars <- long_dat %>% select(x, y)
d_mat <- normalized_vars %>%
stats::dist(method = 'euclidean', diag = TRUE, upper = TRUE) %>%
as.matrix()
d_mat <- normalized_vars %>%
stats::dist(method = 'euclidean', diag = TRUE, upper = TRUE)
class(d_mat)
short_N <- 10
short_dat <- data.frame(
id = as.character (1:short_N),
x = runif(short_N),
y = runif(short_N)
)
d_mat <- short_dat %>% select(-id) %>% stats::dist()
print(d_mat)
d_mat <- short_dat %>% select(-id) %>% stats::dist() %>% as.matrix()
min(d_mat)
max(d_mat)
?sort
vec <- d_mat[:,0]
vec <- d_mat[,0]
vec
View(d_mat)
vec <- d_mat[,1]
vec
sort(vec)
sort(vec, 3)
sort(vec, n=3)
order(vec)
##### Auxiliary functions #####
argpartsort <- function(vec, n){
# Returns the indices of the n smallest values
sorted <- sort(vec, n = n)
max_sorted <- max(sorted[1:n])
indices <- which(vec <= max_sorted)
return(indices)
}
argpartsort(vec, 3)
order(vec, 3)
order(vec)
argpartsort(vec, 5)
order(vec)[1:3]
Rprof()
vect <- runif(1e5)
o <- order(vect)
s <- sort(vect)
Rprof(NULL)
summaryRprof()
Rprof()
vect <- runif(1e6)
o <- order(vect)
s <- sort(vect)
Rprof(NULL)
summaryRprof()
Rprof()
vect <- runif(1e7)
o <- order(vect)
s <- sort(vect)
Rprof(NULL)
summaryRprof()
profvis({
vect <- runif(1e7)
o <- order(vect)
s <- sort(vect)
})
profvis({
vect <- runif(1e7)
o <- order(vect)
sl <- sort.list(vect)
s <- sort(vect)
})
profvis({
vect <- runif(1e7)
s <- sort(vect)
o <- order(vect)
sl <- sort.list(vect)
})
argpartsort2 <- function(vec, n){
# Returns the indices of the n smallest values
return(order(vec)[1:n])
}
source("~/BehavioralDataAnalysisGithub/BehavioralDataAnalysis/R package/BehavioralDataAnalysis/R/pairing.R", echo=TRUE)
# Profiling argpartsort
profvis({
vec <- runif(long_N)
argpartsort(vec, 3)
argpartsort2(vec, 3)
})
# Profiling argpartsort
profvis({
vec <- runif(1e5)
argpartsort(vec, 3)
argpartsort2(vec, 3)
})
install.packages("microbenchmark")
library(microbenchmark)
vec <- runif(1e7)
microbenchmark(
argpartsort(vec, 3),
argpartsort2(vec, 3)
)
# Profiling argpartsort
vec <- runif(1e4)
microbenchmark(
argpartsort(vec, 3),
argpartsort2(vec, 3),
times = 10
)
# Profiling argpartsort
vec <- runif(1e5)
microbenchmark(
argpartsort(vec, 3),
argpartsort2(vec, 3),
times = 10
)
# Profiling argpartsort
vec <- runif(1e6)
microbenchmark(
argpartsort(vec, 3),
argpartsort2(vec, 3),
times = 10
)
# Profiling argpartsort
vec <- runif(1e6)
microbenchmark(
argpartsort(vec, 3),
argpartsort2(vec, 3),
times = 20
)
library(tidyverse)
library(profvis)
library(microbenchmark)
library(BehavioralDataAnalysis)
mpg <- ggplot2::mpg
mpg$id <- as.character(1:nrow(mpg))
short_N <- 10
short_dat <- data.frame(
id = as.character (1:short_N),
x = runif(short_N),
y = runif(short_N)
)
long_N <- 1e4
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
# Profiling stratified assignment on mpg dataset
profvis({
strat_dat <- strat_assign(mpg, 'id')
})
# Profiling stratified assignment on long numeric
profvis({
strat_dat <- strat_assign(long_dat, 'id')
})
source("~/BehavioralDataAnalysisGithub/BehavioralDataAnalysis/R package/BehavioralDataAnalysis/R/pairing.R", echo=TRUE)
# Profiling stratified assignment on 1e3 rows
profvis({
long_N <- 1e3
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
strat_dat <- pairing(long_dat, 'id')
})
profvis({
long_N <- 2e3
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
strat_dat <- pairing(long_dat, 'id')
})
profvis({
long_N <- 1e4
long_dat <- data.frame(
id = as.character (1:long_N),
x = runif(long_N),
y = runif(long_N)
)
strat_dat <- pairing(long_dat, 'id')
})
install.packages("RcppParallel")
library(RcppParallel)
profvis({
long_N <- 1e3
vec <- runif(long_N)
argpartsort(vec, 3)
})
profvis({
long_N <- 1e4
vec <- runif(long_N)
argpartsort(vec, 3)
})
profvis({
long_N <- 1e5
vec <- runif(long_N)
argpartsort(vec, 3)
})
profvis({
long_N <- 1e6
vec <- runif(long_N)
argpartsort(vec, 3)
})
profvis({
long_N <- 1e7
vec <- runif(long_N)
argpartsort(vec, 3)
})
library(Rcpp)
cppFunction('NumericVector partial_sort(NumericVector x, int n) {
NumericVector y = clone(x);
std::partial_sort(y.begin(), y.begin()+n, y.end());
return y;
}')
cppFunction('NumericVector partial_sort(NumericVector x, int n) {
NumericVector y = clone(x);
std::partial_sort(y.begin(), y.begin()+n, y.end());
return y;
}')
?cppFunction
library(installr)
install.Rtools()
Sys.which('make')
Sys.getenv("PATH")
library(Rcpp)
cppFunction('NumericVector partial_sort(NumericVector x, int n) {
NumericVector y = clone(x);
std::partial_sort(y.begin(), y.begin()+n, y.end());
return y;
}')
Sys.getenv("PATH")
library(tidyverse)
library(Rcpp)
library(profvis)
library(microbenchmark)
cppFunction('NumericVector partial_sort(NumericVector x, int n) {
NumericVector y = clone(x);
std::partial_sort(y.begin(), y.begin()+n, y.end());
return y;
}')
system('where make')
system('g++ -v')
compilerCheck()
library(rcpp)
library(Rcpp)
compilerCheck()
?Rcpp.package.skeleton
?`Rcpp-package`
Rcpp-package
Rcpp-package()
vignette("Rcpp-package")
Rcpp.package.skeleton("BehavioralDataAnalysis")
library(devtools)
check()
document()
document()
load_all()
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/rtools42/x86_64-w64-mingw32.static.posix/bin")
Sys.getenv("BINPREF")
load_all()
Sys.setenv(BINPREF = "C:/rtools42/x86_64-w64-mingw32.static.posix/bin/")
load_all()
library(Rcpp)
load_all()
load_all()
usethis::use_rcpp()
install()
load_all()
vec <- c(3, 6, 1, 9, 2)
argpartsort(vec, 2)
partial_sort(vec)
partial_sort(vec, 2)
load_all()
partial_sort(vec, 2)
document()
load_all()
BDA_partial_sort(vec, 2)
argpartsort(vec, 2)
library(devtools)
usethis::use_travis()
usethis::use_github_action("check-release")
usethis::use_package_doc()
document()
document()
Sys.getenv("BINPREF")
library(devtools)
usethis::edit_r_environ()
Sys.getenv("BINPREF")
Sys.getenv("BINPREF")
Sys.getenv("BINPREF")
usethis::edit_r_environ()
usethis::edit_r_environ()
Sys.getenv("BINPREF")
load_all()
load_all()
use_readme_rmd()
build_readme()
?pairing
