geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.025, y=0.2, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
### Figure 9-5. Comparison of power curves for confidence levels 0.90 (solid line),  0.80 (dashed line) and 0.60 (dotted line)
viz_fun9.5 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") +
#Values for confidence level 0.80
geom_point(aes(x = ES, y = power80)) +
geom_line(aes(x = ES, y = power80), inherit.aes = FALSE,
linetype = 'longdash') +
#Values for confidence level 0.60
geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.03, y=0.2, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
### Figure 9-5. Comparison of power curves for confidence levels 0.90 (solid line),  0.80 (dashed line) and 0.60 (dotted line)
viz_fun9.5 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") +
#Values for confidence level 0.80
geom_point(aes(x = ES, y = power80)) +
geom_line(aes(x = ES, y = power80), inherit.aes = FALSE,
linetype = 'longdash') +
#Values for confidence level 0.60
geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.05, y=0.2, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
### Figure 9-5. Comparison of power curves for confidence levels 0.90 (solid line),  0.80 (dashed line) and 0.60 (dotted line)
viz_fun9.5 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") +
#Values for confidence level 0.80
geom_point(aes(x = ES, y = power80)) +
geom_line(aes(x = ES, y = power80), inherit.aes = FALSE,
linetype = 'longdash') +
#Values for confidence level 0.60
geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.1, y=0.25, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
### Figure 9-5. Comparison of power curves for confidence levels 0.90 (solid line),  0.80 (dashed line) and 0.60 (dotted line)
viz_fun9.5 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") +
#Values for confidence level 0.80
geom_point(aes(x = ES, y = power80)) +
geom_line(aes(x = ES, y = power80), inherit.aes = FALSE,
linetype = 'longdash') +
#Values for confidence level 0.60
geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.1, y=0.2, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
### Visualizing the power curve for various effect sizes at a sample size of 1500 and a confidence level of 0.90
# Loading the results of the simulations I have run
es_sim_res <- read_csv("es_sim_res.csv")
viz_fun9.4 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(data=(es_sim_res %>% filter(ES != 0)), aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") + ylab("power") +
geom_label(x=0.025, y=0.055, label="significance") + theme_classic()
}
viz_fun9.4(es_sim_res)
### Visualizing the power curve for various effect sizes at a sample size of 1500 and a confidence level of 0.90
# Loading the results of the simulations I have run
es_sim_res <- read_csv("es_sim_res.csv")
viz_fun9.4 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(data=(es_sim_res %>% filter(ES != 0)), aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") + ylab("power") +
geom_label(x=0.05, y=0.055, label="significance") + theme_classic()
}
viz_fun9.4(es_sim_res)
### Visualizing the power curve for various effect sizes at a sample size of 1500 and a confidence level of 0.90
# Loading the results of the simulations I have run
es_sim_res <- read_csv("es_sim_res.csv")
viz_fun9.4 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(data=(es_sim_res %>% filter(ES != 0)), aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") + ylab("power") +
geom_label(x=0.1, y=0.055, label="significance") + theme_classic()
}
viz_fun9.4(es_sim_res)
### Figure 9-5. Comparison of power curves for confidence levels 0.90 (solid line),  0.80 (dashed line) and 0.60 (dotted line)
viz_fun9.5 <- function(es_sim_res){
ggplot(es_sim_res, aes(x = ES, y = power90)) + geom_point() +
geom_line(aes(x = ES, y = power90), inherit.aes = FALSE) +
geom_hline(yintercept = 0.9, col = 'red') +
xlab("effect size") + ylab("power") +
#Values for confidence level 0.80
geom_point(aes(x = ES, y = power80)) +
geom_line(aes(x = ES, y = power80), inherit.aes = FALSE,
linetype = 'longdash') +
#Values for confidence level 0.60
geom_point(aes(x = ES, y = power60)) +
geom_line(aes(x = ES, y = power60), inherit.aes = FALSE,
linetype = 'dashed') +
#Values for confidence level 0.40
geom_point(aes(x = ES, y = power40)) +
geom_line(aes(x = ES, y = power40), inherit.aes = FALSE,
linetype = 'dotted') +
geom_label(x=0.1, y=0.2, label="significance") +
theme_classic()
}
viz_fun9.5(es_sim_res)
# Common libraries
suppressMessages(suppressWarnings(library(tidyverse)))
library(boot) #Required for Bootstrap simulations
library(rstudioapi) #To load data from local folder
library(ggpubr) #To generate multi-plots
# Chapter-specific libraries
library(blockTools) # For function block()
library(caret) # For one-hot encoding function dummyVars()
library(scales) # For function rescale()
library(lme4) # For hierarchical modeling
library(lmerTest) # For additional diagnostics of hierarchical modeling
library(nbpMatching) #To use 'optimal' algorithm in stratified randomization
library(binaryLogic) # For function as.binary()
# Libraries for high-performance Bootstrap
library(Rfast)
library(doParallel)
### Setting the working directory to the parent folder of this script (Rstudio only)
sourceDir <- rstudioapi::getActiveDocumentContext()$path %>% str_extract("^.+/")
setwd(sourceDir)
set.seed(1234)
options(scipen=10)
# Common libraries
suppressMessages(suppressWarnings(library(tidyverse)))
library(boot) #Required for Bootstrap simulations
library(rstudioapi) #To load data from local folder
library(ggpubr) #To generate multi-plots
# Chapter-specific libraries
library(blockTools) # For function block()
library(caret) # For one-hot encoding function dummyVars()
library(scales) # For function rescale()
library(lme4) # For hierarchical modeling
library(lmerTest) # For additional diagnostics of hierarchical modeling
library(nbpMatching) #To use 'optimal' algorithm in stratified randomization
library(binaryLogic) # For function as.binary()
# Libraries for high-performance Bootstrap
library(Rfast)
library(doParallel)
### Setting the working directory to the parent folder of this script (Rstudio only)
sourceDir <- rstudioapi::getActiveDocumentContext()$path %>% str_extract("^.+/")
setwd(sourceDir)
set.seed(1234)
options(scipen=10)
#Loading the saved output from the simulations
sig_dat <- read_csv("sig_dat.csv")
viz_fun10.3 <- function(sig_dat){
ggplot(sig_dat %>% filter(conf.level==0.90) %>% arrange(lower_bound), aes(y=1:96)) +
geom_linerange(aes(xmin=lower_bound, xmax=upper_bound)) +
geom_vline(xintercept = 0, col='red') +
ylab("Ordered confidence intervals") +
xlab("Coefficient for experimental treatment") + theme_classic()
}
viz_fun10.3(sig_dat)
#Loading the saved output from the simulations
ES_dat <- read_csv("ES_dat.csv")
viz_fun9.4 <- function(ES_dat){
power_dat <- ES_dat %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()) %>%
ungroup() %>%
rbind(sig_dat %>% filter(conf.level == 0.90) %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()))
p <- ggplot(power_dat, aes(x = eff_size, y = power)) +
geom_point() + ylim(c(0,1)) + xlab("effect size") +
geom_line(data = power_dat %>% filter(eff_size != 0)) +
geom_label(x=0.05, y=0.555, label="significance") +
geom_hline(yintercept = 0.80, col = 'red') + theme_classic()
return(p)
}
viz_fun9.4(ES_dat )
#Loading the saved output from the simulations
ES_dat <- read_csv("ES_dat.csv")
viz_fun9.4 <- function(ES_dat){
power_dat <- ES_dat %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()) %>%
ungroup() %>%
rbind(sig_dat %>% filter(conf.level == 0.90) %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()))
p <- ggplot(power_dat, aes(x = eff_size, y = power)) +
geom_point() + ylim(c(0,1)) + xlab("effect size") +
geom_line(data = power_dat %>% filter(eff_size != 0)) +
geom_label(x=0.03, y=0.555, label="significance") +
geom_hline(yintercept = 0.80, col = 'red') + theme_classic()
return(p)
}
viz_fun9.4(ES_dat )
#Loading the saved output from the simulations
ES_dat <- read_csv("ES_dat.csv")
viz_fun9.4 <- function(ES_dat){
power_dat <- ES_dat %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()) %>%
ungroup() %>%
rbind(sig_dat %>% filter(conf.level == 0.90) %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0)/n()))
p <- ggplot(power_dat, aes(x = eff_size, y = power)) +
geom_hline(yintercept = 0.80, col = 'red') + theme_classic() +
geom_point() + ylim(c(0,1)) + xlab("effect size") +
geom_line(data = power_dat %>% filter(eff_size != 0)) +
geom_label(x=0.03, y=0.555, label="significance")
return(p)
}
viz_fun9.4(ES_dat )
viz_fun10.5 <- function(ES_dat){
power_dat2 <- ES_dat %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0.25)/n()) %>%
ungroup() %>%
rbind(sig_dat %>% filter(conf.level == 0.90) %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0.25)/n()))
p <- ggplot(power_dat2, aes(x = eff_size, y = power)) +
geom_point() + ylim(c(0,1)) + xlab("effect size") +
geom_line(data = power_dat2 %>% filter(eff_size != 0)) +
geom_label(x=0.035, y=0.325, label="significance") +
geom_hline(yintercept = 0.80, col = 'red')
return(p)
}
viz_fun10.5(ES_dat)
viz_fun10.5 <- function(ES_dat){
power_dat2 <- ES_dat %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0.25)/n()) %>%
ungroup() %>%
rbind(sig_dat %>% filter(conf.level == 0.90) %>%
group_by(eff_size)  %>%
summarise(power = sum(lower_bound > 0.25)/n()))
p <- ggplot(power_dat2, aes(x = eff_size, y = power)) +
geom_point() + ylim(c(0,1)) + xlab("effect size") +
geom_line(data = power_dat2 %>% filter(eff_size != 0)) +
geom_label(x=0.035, y=0.325, label="significance") +
geom_hline(yintercept = 0.80, col = 'red') +
theme_classic()
return(p)
}
viz_fun10.5(ES_dat)
# Common libraries
suppressMessages(suppressWarnings(library(tidyverse)))
library(boot) #Required for Bootstrap simulations
library(rstudioapi) #To load data from local folder
library(ggpubr) #To generate multi-plots
# Libraries for high-performance Bootstrap
library(mltools) #For function one_hot
library(data.table) #For function as.data.table
library(Rfast) #For function lmfit
library(parallel)
library(doParallel)
### Setting the working directory to the parent folder of this script (Rstudio only)
sourceDir <- rstudioapi::getActiveDocumentContext()$path %>% str_extract("^.+/")
setwd(sourceDir)
set.seed(1234)
options(scipen=10)
# Common libraries
suppressMessages(suppressWarnings(library(tidyverse)))
library(boot) #Required for Bootstrap simulations
library(rstudioapi) #To load data from local folder
library(ggpubr) #To generate multi-plots
# Libraries for high-performance Bootstrap
library(mltools) #For function one_hot
library(data.table) #For function as.data.table
library(Rfast) #For function lmfit
library(parallel)
library(doParallel)
### Setting the working directory to the parent folder of this script (Rstudio only)
sourceDir <- rstudioapi::getActiveDocumentContext()$path %>% str_extract("^.+/")
setwd(sourceDir)
set.seed(1234)
options(scipen=10)
#Reading the data
hist_data <- read_csv("chap11-historical_data.csv")
#Formatting the data
hist_data <- hist_data %>%
mutate(store_id = factor(store_id)) %>%
mutate(day = factor(day)) %>%
mutate(children = factor(children)) %>%
mutate(play_area = factor(play_area))
### Figure 11-3. Visual representation of moderation ###
viz_fun_11.3 <- function(dat){
#Representing visually moderation
summary_dat0 <- dat %>%
group_by(children,play_area) %>%
summarize(avg_duration = mean(duration)) %>%
data.frame()
mod_p0 <- ggplot(summary_dat0, aes(x=children, y=avg_duration,
group=play_area)) + ylim(c(0,65)) +
geom_point() + geom_line(aes(lty=play_area)) + ylab("Average visit duration") +
scale_linetype_manual(values=c("dotted", "solid")) + theme_classic()
mod_p0
}
viz_fun_11.3(hist_data)
### Figure 11-5. Non-linear relationships between variables ###
viz_fun_11.5 <- function(dat){
p1 <- ggplot(dat, aes(Emails, Purchases)) + geom_point() +
xlab("avg. monthly marketing emails") + ylab("avg. monthly purchases") +
theme_classic()
p2 <- ggplot(dat, aes(Properties, Customers)) + geom_point() +
xlab("number of properties (1000s)") + ylab("number of customers (1000s)") +
theme_classic()
ggarrange(p1, p2, ncol=2, nrow=1)
}
viz_fun_11.5(nonlin_data)
#Toy dataset for this subsection
nonlin_data <- read_csv("chap11-nonlin_data.csv")
### Figure 11-5. Non-linear relationships between variables ###
viz_fun_11.5 <- function(dat){
p1 <- ggplot(dat, aes(Emails, Purchases)) + geom_point() +
xlab("avg. monthly marketing emails") + ylab("avg. monthly purchases") +
theme_classic()
p2 <- ggplot(dat, aes(Properties, Customers)) + geom_point() +
xlab("number of properties (1000s)") + ylab("number of customers (1000s)") +
theme_classic()
ggarrange(p1, p2, ncol=2, nrow=1)
}
viz_fun_11.5(nonlin_data)
### Figure 11-6. Linear (dashed) and quadratic (solid) lines of best fit ###
viz_fun_11.6 <- function(dat){
ggplot(dat, aes(Emails, Purchases)) + geom_point(shape=16) +
xlab("avg. monthly marketing emails") +
ylab("avg. monthly purchases") +
geom_line(aes(y=pred_PP_lin, col='red'), lty="dashed", show.legend=FALSE) +
geom_line(aes(y=pred_PP_quad, col='blue'), show.legend=FALSE)
}
viz_fun_11.6(nonlin_data)
### Figure 11-6. Linear (dashed) and quadratic (solid) lines of best fit ###
viz_fun_11.6 <- function(dat){
ggplot(dat, aes(Emails, Purchases)) + geom_point(shape=16) +
xlab("avg. monthly marketing emails") +
ylab("avg. monthly purchases") +
geom_line(aes(y=pred_PP_lin, col='red'), lty="dashed", show.legend=FALSE) +
geom_line(aes(y=pred_PP_quad, col='blue'), show.legend=FALSE) +
theme_classic()
}
viz_fun_11.6(nonlin_data)
viz_fun11.12 <- function(dat){
viz_dat <- dat %>%
dplyr::group_by(children) %>%
mutate(children = factor(children)) %>%
summarise(prop = n()/nrow(hist_data)) %>%
mutate(duration = 11.92)
ggplot(viz_dat, aes(x=children, y=duration, fill=children, width=prop*1.98)) +
geom_bar(stat='identity',  show.legend=FALSE) + ylim(c(0,32)) + ylab("effect of play area (mn)") +
theme_classic()
}
viz_fun11.12(hist_data)
# Figure 11-13. Average effect coming entirely from customers with Children
viz_fun11.13 <- function(dat){
viz_dat <- hist_data %>%
dplyr::group_by(children) %>%
mutate(children = factor(children)) %>%
summarise(prop = n()/nrow(hist_data)) %>%
mutate(duration = c(0.1, 11.92 * (1 + 0.613/0.387)))
ggplot(viz_dat, aes(x=children, y=duration, fill=children, width=prop*1.98)) +
geom_bar(stat='identity',  show.legend=FALSE) + ylim(c(0,32)) + ylab("effect of play area (mn)") +
theme_classic()
}
viz_fun11.13(hist_data)
### Figure 11-19. Moderated moderation across different age groups ###
viz_fun_11.19 <- function(dat){
summary_dat <- dat %>%
mutate(age_grp = factor(round(age/10)*10, ordered = TRUE,
levels = c("20","30","40","50","60","70","80"))) %>%
group_by(children,play_area, age_grp) %>%
summarize(avg_duration = mean(duration)) %>%
data.frame()
mod_p1 <- ggplot(summary_dat, aes(x=children, y=avg_duration, group=play_area)) +
ylim(c(0,65)) + geom_point() + geom_line(aes(lty=play_area)) +
labs(y="Average visit duration") + scale_linetype_manual(values=c("dotted",
"solid")) +
facet_grid(.~age_grp) + theme_classic()
mod_p1
}
viz_fun_11.19(hist_data)
# Function for bootstrap
mod_boot_fun <- function(dat, B, N){
set.seed(1)
#One-hot encoding factors in data
dat <- dat %>%
dplyr::select(-day,-store_id,-prop_children) %>%
as.data.table() %>%
mltools::one_hot(dropUnusedLevels = TRUE) %>%
mutate(const = 1) %>%
#Adding moderation variable
mutate(inter = children_1 * play_area_1)
#Converting the original data to a matrix
mat <- data.matrix(dat)
#Preallocating memory to result vector
boot_list <- list()
#Generating the random numbers for the bootstrap
rng <- matrix(data = sample(1:N, size = N*B, replace = TRUE),
nrow = N, ncol = B)
loop_fun <- function(k){
if(k %% 10 == 0){
cat("starting iteration", k, "\n")
}
boot_mat <- mat[rng[,k],]
#Coefficients for moderated effect
X <- boot_mat[,c('play_area_1', 'children_1', 'inter', 'age', 'const')]
Y <- boot_mat[,'duration']
coeffs <- (Rfast::lmfit(X, Y)$be)
res <- c(
sample_size = N,
coeff_0 = as.numeric(coeffs['const',]),
coeff_p = as.numeric(coeffs['play_area_1',]),
coeff_c = as.numeric(coeffs['children_1',]),
coeff_i = as.numeric(coeffs['inter',])
)
return(res)
}
## Parallelized bootstrap
#Detecting the number of cores for parallel processing
numCores <- detectCores()
registerDoParallel(numCores)
boot_list <- foreach(i=1:B, .packages = 'Rfast') %dopar% loop_fun(i)
stopImplicitCluster()
boot_summary <- bind_rows(boot_list)
return(boot_summary)
}
#Running the bootstrap simulation with 1k samples of 10k rows
mod_summ10k <- mod_boot_fun(hist_data, B = 1e3, N = 1e4)
### Figure 11-21. Distribution of bootstrapped values for interaction coefficient (1k samples of 10k rows) ###
viz_fun_11.21 <- function(dat){
ggplot(dat, aes(x=coeff_i)) + geom_histogram() + xlim(c(19.5,22.5)) +
geom_vline(xintercept = 20.985, col='red') + xlab("beta_pc") +
theme_classic()
}
viz_fun_11.21(mod_summ10k)
#Running the bootstrap simulation with 1k samples of 200k rows
mod_summ200k <- mod_boot_fun(hist_data, B = 1e3, N = 2e5)
### Figure 11-22. Distribution of bootstrapped values for interaction coefficient (1k samples of 200k rows) ###
viz_fun_11.22 <- function(dat){
ggplot(dat, aes(x=coeff_i)) + geom_histogram() + xlim(c(19.5,22.5)) +
geom_vline(xintercept = 20.985, col='red') + xlab("beta_pc") + theme_classic()
}
viz_fun_11.22(mod_summ200k)
# Creating smaller sample for readability of figures
set.seed(1)
extract_dat <- hist_data %>% slice_sample(n=1e3)
### Figure 11-23. Sample of 1,000 data points and regression lines with a play area (full dots, solid line) and without (crosses, dashed line), without moderation term ###
viz_fun_11.23 <- function(dat){
ggplot(extract_dat, aes(x=age, y=duration, col=play_area)) +
geom_point(aes(shape = play_area), alpha = 0.8) +
scale_shape_manual(values=c(4, 16)) +
geom_abline(intercept = 25, slope = -0.024, col = 'red', lty='dashed', size = 1.5) +
geom_abline(intercept = 25+12.5568, slope = -0.024, col = 'blue') + theme_classic()
}
viz_fun_11.23(extract_dat)
### Figure 11-24. Sample of 1,000 data points and regression lines with a play area (full dots, solid line) and without (crosses, dashed line), with moderation term ###
viz_fun_11.24 <- function(dat){
ggplot(extract_dat, aes(x=age, y=duration, col=play_area)) +
geom_point(aes(shape = play_area), alpha = 0.8) +
scale_shape_manual(values=c(4, 16)) +
geom_abline(intercept = 23.82, slope = 0, col = 'red', lty='dashed', size = 1.5) +
geom_abline(intercept = 23.82+15.852, slope = -0.0659, col = 'blue') + theme_classic()
}
viz_fun_11.24(extract_dat)
